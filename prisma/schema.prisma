datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//PARA NEXT AUTH CON PRISMA
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   @db.Char(128) //sha512
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//PARA NEXT AUTH CON PRISMA

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  slug     String  @unique
  description String?
  active      Boolean @default(true)
  curso       Curso[]
}

// NUEVAS TABLAS
model Curso {
  id                Int            @id @default(autoincrement())
  title             String
  description       String?
  name              String
  valuation         Float?
  image             String?
  price             Float?
  registration_date DateTime       @default(now())
  active            Boolean        @default(true)
  category          Category       @relation(fields: [categoryId], references: [id])
  categoryId        Int
  cursoKeyword      CursoKeyword[] @relation(references: [id])
  ruta              String?        @unique
  texto             String?
  favorites         Favorites[]
  shopingCarts      ShopingCart[]
}

model CursoKeyword {
  id    Int     @id @default(autoincrement())
  name  String?
  curso Curso[] @relation(references: [id])
}

model ShopingCart {
  id                Int       @id @default(autoincrement())
  idUsuario         String
  idCurso           Int
  registration_date DateTime  @default(now())     
  active            Boolean   @default(true)
  curso             Curso     @relation(fields: [idCurso], references: [id])

}

model Favorites {
  id                Int       @id @default(autoincrement())
  idUsuario         String
  idCurso           Int
  registration_date DateTime  @default(now())  
  active            Boolean   @default(true)
  curso             Curso     @relation(fields: [idCurso], references: [id])
}

model Leccion {
  id                Int            @id @default(autoincrement())
  title             String
  description       String?
  cuerpo            String?       @db.Text
  url               String?       @db.Text
  orden             Int?          @default(1)
  helpers           HelperLeccion[]
}

model HelperLeccion {
  id                Int            @id @default(autoincrement())
  title             String
  description       String?
  orden             Int?          @default(1)
  leccionId         Int
  lecciones         Leccion       @relation(fields: [leccionId], references: [id])
}